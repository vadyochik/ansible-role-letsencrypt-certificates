---
- name: Ensure directory for Let's Encrypt challenges exists.
  file:
    path: "{{ le_certs_dir }}/webroot/.well-known/acme-challenge"
    state: directory
    mode: 0700

- name: Ensure directories for domains TLS certs exist.
  file:
    path: "{{ le_certs_dir }}/{{ item.common_name }}"
    state: directory
    mode: 0755
  with_items: "{{ le_certs_to_obtain }}"
  loop_control:
    label: "{{ item.common_name }}"
  when: item.common_name is defined
  tags:
    - openssl

- name: Generate an OpenSSL private key for Let's Encrypt account.
  openssl_privatekey:
    path: "{{ le_certs_dir }}/acme_account.key"
  tags:
    - openssl

- name: Generate an OpenSSL private keys for the domains.
  openssl_privatekey:
    path: "{{ le_certs_dir }}/{{ item.common_name }}/privkey.pem"
  with_items: "{{ le_certs_to_obtain }}"
  loop_control:
    label: "{{ item.common_name }}"
  when: item.common_name is defined
  tags:
    - openssl

- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path: "{{ le_certs_dir }}/{{ item.common_name }}/csr.pem"
    privatekey_path: "{{ le_certs_dir }}/{{ item.common_name }}/privkey.pem"
    common_name: "{{ item.common_name }}"
    subject_alt_name: "{{ item.subject_alt_name|default(omit) }}"
  with_items: "{{ le_certs_to_obtain }}"
  loop_control:
    label: "{{ item.common_name }}"
  when: item.common_name is defined
  tags:
    - openssl

- name: Download Let's Encrypt's intermediate CA cert 
  get_url:
    url: "{{ le_ca_cert_url }}"
    dest: "{{ le_certs_dir }}/{{ item.common_name }}/chain.pem"
    checksum: "{{ le_ca_cert_checksum }}"
  with_items: "{{ le_certs_to_obtain }}"
  loop_control:
    label: "{{ item.common_name }}"
  tags:
    - openssl

- name: Backup existing certificates
  copy:
    src: "{{ le_certs_dir }}/{{ item.common_name }}/cert.pem"
    dest: "{{ le_certs_dir }}/{{ item.common_name }}/cert.pem.old"
    remote_src: yes
    backup: True
  with_items: "{{ le_certs_to_obtain }}"
  loop_control:
    label: "{{ item.common_name }}"
  when: item.common_name is defined
  ignore_errors: yes
  tags:
    - openssl

- name: Remove existing certificates
  file:
    path: "{{ le_certs_dir }}/{{ item.common_name }}/cert.pem"
    state: absent
  with_items: "{{ le_certs_to_obtain }}"
  loop_control:
    label: "{{ item.common_name }}"
  when: item.common_name is defined
  tags:
    - openssl

- name: Run temporary python SimpleHTTPServer for Let's Encrypt challenges
  shell: "nohup python -mSimpleHTTPServer {{ le_web_server_port | quote }} >{{ le_certs_dir | quote }}/SimpleHTTPServer.log 2>&1 &"
  args:
    chdir: "{{ le_certs_dir }}/webroot"
  when: le_run_python_simplehttpserver

- name: Wait for internal web server for Let's Encrypt challenges
  wait_for:
    port: "{{ le_web_server_port }}"
    delay: 3
  when: le_run_python_simplehttpserver

- name: Temporary redirect all traffic dst-to 80 port to localhost
  become: True
  iptables:
    table: nat
    chain: OUTPUT
    protocol: tcp
    destination_port: 80
    jump: DNAT
    to_destination: 127.0.0.1:80
    state: present
  when: ansible_system == "Linux"
  tags:
    - iptables

- name: Generate new Let's Encrypt Certificates
  openssl_certificate:
    path: "{{ le_certs_dir }}/{{ item.common_name }}/cert.pem"
    csr_path: "{{ le_certs_dir }}/{{ item.common_name }}/csr.pem"
    privatekey_path: "{{ le_certs_dir }}/{{ item.common_name }}/privkey.pem"
    provider: acme
    acme_accountkey_path: "{{ le_certs_dir }}/acme_account.key"
    acme_challenge_path: "{{ le_certs_dir }}/webroot/.well-known/acme-challenge/"
  with_items: "{{ le_certs_to_obtain }}"
  loop_control:
    label: "{{ item.common_name }}"
  when: item.common_name is defined
  tags:
    - openssl

- name: Kill temporary python SimpleHTTPServer web server
  command: "pkill -f '^python .* {{ le_web_server_port | quote }}$'"
  when: le_run_python_simplehttpserver

- name: Remove prevously created redirect for 80 port traffic
  become: True
  iptables:
    table: nat
    chain: OUTPUT
    protocol: tcp
    destination_port: 80
    jump: DNAT
    to_destination: 127.0.0.1:80
    state: absent
  when: ansible_system == "Linux"
  tags:
    - iptables

- name: Verify just created LetsEncrypt signed TLS certificates
  openssl_certificate:
    path: "{{ le_certs_dir }}/{{ item.common_name }}/cert.pem"
    provider: assertonly
    issuer:
      O: Let's Encrypt
    valid_in: "{{ item.valid_in | default(le_default_valid_in) }}"
  with_items: "{{ le_certs_to_obtain }}"
  loop_control:
    label: "{{ item.common_name }}"
  when: item.common_name is defined
